package com.microsoft.excelmobile

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.lifecycle.ViewModelProvider
import com.github.mikephil.charting.charts.Chart
import com.github.mikephil.charting.charts.LineChart
import com.github.mikephil.charting.data.LineData
import com.microsoft.excelmobile.models.Workbook
import com.microsoft.excelmobile.services.ChartingService

class ChartFragment : Fragment() {

    private lateinit var viewModel: ChartViewModel
    private lateinit var binding: FragmentChartBinding
    private lateinit var chartView: Chart<*>

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        binding = FragmentChartBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        viewModel = ViewModelProvider(this).get(ChartViewModel::class.java)
        initializeChartView()
        setupChart()
    }

    private fun initializeChartView() {
        // For this example, we'll use a LineChart. You can extend this to support other chart types.
        chartView = LineChart(requireContext())
        binding.chartContainer.addView(chartView)
    }

    private fun setupChart() {
        val workbook = viewModel.getWorkbook()
        val chartingService = ChartingService()
        val chartData = chartingService.getChartData(workbook)
        
        configureChartSettings()
        applyDataToChart(chartData)
    }

    private fun configureChartSettings() {
        (chartView as LineChart).apply {
            description.isEnabled = false
            setTouchEnabled(true)
            isDragEnabled = true
            setScaleEnabled(true)
            setPinchZoom(true)
            setDrawGridBackground(false)
            // Add more chart configuration as needed
        }
    }

    private fun applyDataToChart(chartData: LineData) {
        (chartView as LineChart).data = chartData
        chartView.invalidate() // refresh the chart
    }

    fun updateChartData(data: LineData) {
        viewModel.updateChartData(data)
        applyDataToChart(data)
    }

    companion object {
        fun newInstance() = ChartFragment()
    }
}

// ViewModel for ChartFragment
class ChartViewModel : ViewModel() {
    private lateinit var workbook: Workbook
    private lateinit var chartData: LineData

    fun getWorkbook(): Workbook {
        // In a real implementation, this would fetch the workbook from a repository or service
        return workbook
    }

    fun updateChartData(data: LineData) {
        chartData = data
    }
}

// This is a placeholder for the view binding class
class FragmentChartBinding {
    lateinit var chartContainer: ViewGroup

    companion object {
        fun inflate(inflater: LayoutInflater, container: ViewGroup?, attachToRoot: Boolean): FragmentChartBinding {
            // In a real implementation, this would be generated by the view binding library
            return FragmentChartBinding()
        }
    }
}