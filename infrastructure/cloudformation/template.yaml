AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for deploying Microsoft Excel application infrastructure on AWS'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - PublicSubnet1
          - PublicSubnet2
          - PrivateSubnet1
          - PrivateSubnet2
      - Label:
          default: "Database Configuration"
        Parameters:
          - DBInstanceClass
          - DBName
          - DBUsername
          - DBPassword
      - Label:
          default: "Application Configuration"
        Parameters:
          - EnvironmentName
          - InstanceType
          - KeyName
    ParameterLabels:
      VpcId:
        default: "VPC ID"
      PublicSubnet1:
        default: "Public Subnet 1"
      PublicSubnet2:
        default: "Public Subnet 2"
      PrivateSubnet1:
        default: "Private Subnet 1"
      PrivateSubnet2:
        default: "Private Subnet 2"
      DBInstanceClass:
        default: "DB Instance Class"
      DBName:
        default: "Database Name"
      DBUsername:
        default: "Database Username"
      DBPassword:
        default: "Database Password"
      EnvironmentName:
        default: "Environment Name"
      InstanceType:
        default: "EC2 Instance Type"
      KeyName:
        default: "EC2 Key Pair Name"

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select the VPC where resources will be deployed

  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Select the first public subnet

  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Select the second public subnet

  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Select the first private subnet

  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Select the second private subnet

  DBInstanceClass:
    Type: String
    Default: db.t3.medium
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.t3.large
    Description: Select the database instance type

  DBName:
    Type: String
    MinLength: 1
    MaxLength: 64
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Description: Enter the database name

  DBUsername:
    Type: String
    MinLength: 1
    MaxLength: 16
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Description: Enter the database admin username

  DBPassword:
    Type: String
    MinLength: 8
    MaxLength: 41
    NoEcho: true
    Description: Enter the database admin password

  EnvironmentName:
    Type: String
    Default: Development
    AllowedValues:
      - Development
      - Staging
      - Production
    Description: Select the environment type

  InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
    Description: Select the EC2 instance type

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances

Mappings:
  EnvironmentToAMI:
    us-east-1:
      Development: ami-0cff7528ff583bf9a
      Staging: ami-0cff7528ff583bf9a
      Production: ami-0cff7528ff583bf9a
    us-west-2:
      Development: ami-0892d3c7ee96c0bf7
      Staging: ami-0892d3c7ee96c0bf7
      Production: ami-0892d3c7ee96c0bf7

Resources:
  ExcelAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Excel application
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ExcelApp-SG

  ExcelDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Excel database
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ExcelAppSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ExcelDB-SG

  ExcelAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-ExcelApp-LT
      LaunchTemplateData:
        ImageId: !FindInMap [EnvironmentToAMI, !Ref 'AWS::Region', !Ref 'EnvironmentName']
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref ExcelAppSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "<h1>Hello from Microsoft Excel App</h1>" > /var/www/html/index.html

  ExcelAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref ExcelAppLaunchTemplate
        Version: !GetAtt ExcelAppLaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref ExcelAppTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ExcelApp-Instance
          PropagateAtLaunch: true

  ExcelAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ExcelAppSecurityGroup

  ExcelAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId: !Ref VpcId

  ExcelAppListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ExcelAppTargetGroup
      LoadBalancerArn: !Ref ExcelAppLoadBalancer
      Port: 80
      Protocol: HTTP

  ExcelAppDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: '20'
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref ExcelDBSecurityGroup
      DBSubnetGroupName: !Ref ExcelDBSubnetGroup

  ExcelDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Excel database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  ExcelAppS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-excelapp-${AWS::AccountId}
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  ExcelAppCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          TargetOriginId: ExcelAppLB
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt ExcelAppLoadBalancer.DNSName
            Id: ExcelAppLB
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  ExcelAppDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub ${EnvironmentName}-ExcelApp-Table

  ExcelAppLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ExcelAppLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt ExcelAppLambdaRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const response = {
              statusCode: 200,
              body: JSON.stringify('Hello from Excel App Lambda!'),
            };
            return response;
          };
      Runtime: nodejs14.x

Outputs:
  LoadBalancerDNSName:
    Description: DNS name of the Application Load Balancer
    Value: !GetAtt ExcelAppLoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerDNSName

  CloudFrontDomainName:
    Description: Domain name of the CloudFront distribution
    Value: !GetAtt ExcelAppCloudFront.DomainName
    Export:
      Name: !Sub ${AWS::StackName}-CloudFrontDomainName

  DatabaseEndpoint:
    Description: Endpoint of the RDS database
    Value: !GetAtt ExcelAppDatabase.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseEndpoint

  S3BucketName:
    Description: Name of the S3 bucket
    Value: !Ref ExcelAppS3Bucket
    Export:
      Name: !Sub ${AWS::StackName}-S3BucketName

  DynamoDBTableName:
    Description: Name of the DynamoDB table
    Value: !Ref ExcelAppDynamoDB
    Export:
      Name: !Sub ${AWS::StackName}-DynamoDBTableName

  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt ExcelAppLambdaFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaFunctionArn